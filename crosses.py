ALL_POSITIONS = [

("I", 55.71239925, 13.21355343),
("I", 55.71239914, 13.21355334),
("II", 55.71241653, 13.21351778),
("II", 55.71241628, 13.21351812),
("III", 55.71242025, 13.21348155),
("III", 55.71242016, 13.21348151),
("IV", 55.7124332, 13.21350834),
("IV", 55.71243314, 13.21350831),
("V", 55.71244309, 13.21349424),
("V", 55.7124431, 13.21349423),
("VI", 55.71244619, 13.21345192),
("VI", 55.71244625, 13.21345186),
("VII", 55.71246568, 13.21348117),
("VII", 55.71246576, 13.21348119),
("VIII", 55.71246569, 13.21344156),
("VIII", 55.71246576, 13.21344161),
("IX", 55.71248128, 13.21344263),
("IX", 55.71248124, 13.21344267),
("X", 55.71246406, 13.21339986),
("X", 55.71246411, 13.2133999),
("XI", 55.71248765, 13.21339868),
("XI", 55.71248762, 13.21339869),
("XII", 55.71250369, 13.21340257),
("XII", 55.71250374, 13.21340251),
("XII", 55.71250379, 13.21340254),
("XII", 55.7125037, 13.21340254),
("XIII", 55.71249327, 13.21336961),
("XIII", 55.71249331, 13.21336963),
("XIV", 55.7125101, 13.21336116),
("XIV", 55.71251012, 13.21336118),
("XV", 55.71252066, 13.21337456),
("XV", 55.71252068, 13.21337449),
("XVI", 55.71251032, 13.21332159),
("XVI", 55.71251029, 13.21332163),
("XVI", 55.71251032, 13.21332169),
("XVII", 55.7125336, 13.21332314),
("XVII", 55.71253363, 13.21332317),
("XVIII", 55.71254281, 13.21333053),
("XVIII", 55.71254283, 13.21333051),
("XIX", 55.71253564, 13.21329237),
("XIX", 55.71253561, 13.2132924),
("XX", 55.71255586, 13.21328057),
("XX", 55.71255584, 13.21328058),
("XXI", 55.71257379, 13.21328084),
("XXI", 55.71257387, 13.21328083),
("XXII", 55.71256079, 13.21324474),
("XXII", 55.71256088, 13.21324473),
("XXIII", 55.71258231, 13.21324444),
("XXIII", 55.71258236, 13.21324453),
("XXIV", 55.71256877, 13.21321546),
("XXIV", 55.71256877, 13.21321546),
("XXV", 55.71258373, 13.21321766),
("XXV", 55.71258372, 13.21321756),
("XXVI", 55.71258817, 13.21318528),
("XXVI", 55.71258816, 13.2131853),
("XXVII", 55.71259204, 13.21315557),
("XXVII", 55.71259204, 13.21315565),
("XXVIII", 55.71260242, 13.21317704),
("XXVIII", 55.71260247, 13.21317703),
("XXIX", 55.71260989, 13.21314716),
("XXIX", 55.71260987, 13.21314723),
]


def avarage(positions):
    tot_pos = len(positions)
    lat_sum = sum(n for n,_ in positions)
    long_sum = sum(n for _,n in positions)

    return lat_sum/tot_pos, long_sum/tot_pos


def get_positions():
    pos = {}
    avaraged = {}

    for name, lat, long in ALL_POSITIONS:
        if name in pos:
            pos[name].append((lat, long))
        else:
            pos[name] = [(lat, long)]

    for name, pos in pos.items():
        avaraged[name] = avarage(pos)

    return avaraged
